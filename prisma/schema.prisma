generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.ziaotmjhvbwwlvjirdhj:2Ew6syXOqgrPV096@aws-0-us-east-1.pooler.supabase.com:6543/postgres?sslmode=require&pgbouncer=true&connection_limit=1&pool_timeout=20"
}

model User {
  id                String    @id @default(cuid())
  email             String    @unique
  password          String
  name              String
  emailVerified     Boolean   @default(false)
  verificationToken String?   @unique
  resetToken        String?   @unique
  resetTokenExpiry  DateTime?
  imageUrl          String?
  aboutMe           String?
  location          String?
  isWorker          Boolean   @default(false)
  rating            Float?    @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  completedTasks    Int       @default(0)
  reviewCount       Int       @default(0)
  taskRating        Float     @default(0)
  portfolioImages   String[]  @default([])
  portfolioVideo    String?
  bids              Bid[]     @relation("BidCreator")
  sentMessages      Message[] @relation("MessageSender")
  receivedMessages  Message[] @relation("MessageReceiver")
  tasks             Task[]    @relation("TaskCreator")

  @@index([email])
  @@index([verificationToken])
  @@index([resetToken])
}

model Task {
  id          String    @id @default(cuid())
  title       String
  description String
  budget      Float?
  status      String    @default("open")
  location    String?
  userId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  category    String?
  subcategory String?
  bids        Bid[]     @relation("TaskBids")
  messages    Message[] @relation("TaskMessages")
  createdBy   User      @relation("TaskCreator", fields: [userId], references: [id])

  @@index([userId])
  @@index([category])
  @@index([status])
}

model Bid {
  id        String    @id @default(cuid())
  amount    Float
  proposal  String
  status    String    @default("pending")
  taskId    String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  task      Task      @relation("TaskBids", fields: [taskId], references: [id])
  createdBy User      @relation("BidCreator", fields: [userId], references: [id])
  messages  Message[]

  @@index([taskId])
  @@index([userId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  fromUserId String
  toUserId   String
  taskId     String
  bidId      String?
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  bid        Bid?     @relation(fields: [bidId], references: [id])
  from       User     @relation("MessageSender", fields: [fromUserId], references: [id])
  task       Task     @relation("TaskMessages", fields: [taskId], references: [id])
  to         User     @relation("MessageReceiver", fields: [toUserId], references: [id])

  @@index([fromUserId])
  @@index([toUserId])
  @@index([taskId])
  @@index([bidId])
}

model Review {
  id         String   @id @default(cuid())
  rating     Float
  comment    String?
  fromUserId String
  toUserId   String
  taskId     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([fromUserId])
  @@index([toUserId])
  @@index([taskId])
}
