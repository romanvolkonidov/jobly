// prisma/schema.prisma

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

generator client {
provider = "prisma-client-js"
}

model User {
 id                String    @id @default(cuid())
 email             String    @unique
 password          String
 name              String
 emailVerified     Boolean   @default(false)
 verificationToken String?   @unique
 resetToken        String?   @unique
 resetTokenExpiry  DateTime?
 imageUrl          String?
 aboutMe           String?   @db.Text
 location          String?
 isWorker          Boolean   @default(false)
 rating            Float?    @default(0)
 reviewCount       Int       @default(0)
 completedTasks    Int       @default(0)
 tasks             Task[]    @relation("TaskCreator")
 bids              Bid[]     @relation("BidCreator") 
 createdAt         DateTime  @default(now())
 updatedAt         DateTime  @updatedAt
 taskRating        Float     @default(0)

 @@index([email])
 @@index([verificationToken])
 @@index([resetToken])
}

model Task {
 id          String    @id @default(cuid())
 title       String
 description String    @db.Text
 budget      Float?
 status      String    @default("open") // open, in_progress, completed, cancelled
 location    String?
 createdBy   User      @relation("TaskCreator", fields: [userId], references: [id])
 userId      String
 bids        Bid[]     @relation("TaskBids")
 createdAt   DateTime  @default(now())
 updatedAt   DateTime  @updatedAt

 @@index([userId])
}

model Bid {
 id          String    @id @default(cuid())
 amount      Float
 proposal    String    @db.Text
 status      String    @default("pending") // pending, accepted, rejected
 task        Task      @relation("TaskBids", fields: [taskId], references: [id])
 taskId      String
 createdBy   User      @relation("BidCreator", fields: [userId], references: [id])
 userId      String
 createdAt   DateTime  @default(now())
 updatedAt   DateTime  @updatedAt

 @@index([taskId])
 @@index([userId])
}

model Review {
 id          String    @id @default(cuid())
 rating      Float
 comment     String?   @db.Text
 fromUserId  String
 toUserId    String
 taskId      String
 createdAt   DateTime  @default(now())
 updatedAt   DateTime  @updatedAt

 @@index([fromUserId])
 @@index([toUserId])
 @@index([taskId])
}